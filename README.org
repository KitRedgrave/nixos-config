#+title: Kit Redgrave's NixOS Config

This repo will eventually contain Nix configuration for as many of my systems as I can get NixOS on.

* Overview
This repo is a Nix flake leaning on [[https://github.com/snowfallorg/lib][Snowfall Lib]].

** Secrets
This flake depends on [[https://github.com/Mic92/sops-nix][sops-nix]] (and [[https://github.com/getsops/sops][sops]]) to decrypt secrets at Nix activation time, and also depends on Git smudge/clean filter rules to encrypt and decrypt SSH host private keys with sops.

The SSH host key unfortunately has to be installed in the new system imperatively, but nixos-anywhere makes that easy with a command-line option. Once the SSH host key is installed, any further managing of secrets happens in Git and deployments.

** Deployment
This flake depends on [[https://github.com/nix-community/nixos-anywhere][nixos-anywhere]] for initial deployments (including host secrets), and [[https://github.com/serokell/deploy-rs][deploy-rs]] for subsequent deployments.

* HOWTO
** Rebuild the current system from this repository?
*** macOS
#+begin_src bash
darwin-rebuild switch --flake .
#+end_src

*** NixOS
#+begin_src bash
nixos-rebuild switch --flake .
#+end_src

** Build a bootable USB stick or SD card image?
*** Raspberry Pi
#+begin_src bash
nix build .#nixosConfigurations.raspberrypi.config.system.build.sdImage
#+end_src

*** x86_64-linux systems
#+begin_src bash
nix build .#nixosConfigurations.$SYSTEM.config.system.build.isoImage
#+end_src

** Deploy new builds?
*** First Deploy
1. Generate an SSH host keypair for the new machine

#+begin_src bash
# for example
PLATFORM=x86_64-linux
SYSTEM=xyzzy
KEYPATH=systems/$PLATFORM/$SYSTEM/ssh_host_ed25519_key
ssh-keygen -t ed25519 -f $KEYPATH

mv $KEYPATH $KEYPATH.enc
#+end_src

2. Add the public key to .sops.yaml in Age format

#+begin_src bash
# Conversion to age
PUBKEY=$(ssh-to-age -i $KEYPATH.pub)

# Add "&server_$SYSTEM $PUBKEY" to 'keys'
# Add "*server_$SYSTEM" to creation_rules[0].key_groups.age
# Add a creation rule for system folder like others
edit .sops.yaml
#+end_src


3. Add an entry to .gitattributes to encrypt the private key

#+begin_src bash
# smudge/clean filters for sops are configured in .git/config
echo "$KEYPATH.enc filter=sops\n" >> .gitattributes
#+end_src

4. Stage your code into Git, which will encrypt the private key

#+begin_src bash
git add systems/$PLATFORM/$SYSTEM/
#+end_src

5. Deploy your code

#+begin_src bash
# booting the target from a nixos installer image works great for this
# this works for any recentish linux box you can ssh into and have root on
nixos-anywhere --disk-encryption-keys /etc/ssh/ssh_host_ed25519_key $KEYPATH.enc --flake .#$SYSTEM --target-host user@target_host
#+end_src

*** Existing Deploy
1. Add a node and system profile to flake.nix::outputs.deploy.nodes

2. Deploy your code
#+begin_src bash
deploy -i .#$SYSTEM
#+end_src

* Roadmap
** DONE Secrets management with sops-nix
** DONE Deploy management with deploy-rs
  https://github.com/serokell/deploy-rs?tab=readme-ov-file#overall-usage
** TODO Unify Nix config with work laptop
** TODO Add Emacs configuration
** TODO Unify Emacs configuration with work laptop
** DONE Add NixOS config for storage server
** DONE Add Disko

* References
- https://github.com/nixos/nixpkgs
- https://github.com/nixos/nixos-hardware
- https://github.com/LnL7/nix-darwin
- https://github.com/nix-community/home-manager
- https://github.com/nix-community/nixos-generators
- https://github.com/nix-community/raspberry-pi-nix
- https://github.com/snowfallorg/lib
- https://github.com/snowfallorg/flake
- https://github.com/Mic92/sops-nix
- https://github.com/getsops/sops
- https://github.com/nix-community/nixos-anywhere
- https://github.com/serokell/deploy-rs
